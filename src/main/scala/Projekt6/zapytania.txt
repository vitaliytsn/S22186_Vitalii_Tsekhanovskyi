1)MATCH (t:town { name:"Darjeeling" }),(s:patheak { name:"Sabargram" })​
WITH t,ms
MATCH pathath = Shortestpathath((t)-[*]-(s))​
RETURN pathath​
2)MATCH (source:town {name: "Darjeeling"}), (target:patheak {name: "Sandakpathhu"}), path = allShortestpathaths((source)-[*]->(target))
WITH path, relationshipaths(path) as rel
WHERE ALL (r in rel WHERE r.winter = "true")
RETURN path, rel
3)
a)MATCH path = (source:town {name: "Darjeeling"})-[r*]->(target:peak {name: "Sandakphu"})
UNWIND r as rel
WITH path, COLLECT(rel.distance) AS distances
WITH path, reduce(acc = 0, d in distances | acc + d) as distance
RETURN path, distance
ORDER BY distance ASC
b)MATCH path = (source:town {name: "Darjeeling"})-[r:twowheeler*]->(target)
WHERE ALL (r IN relationships(path) WHERE r.summer = "true")
RETURN target
4)MATCH (a:Airport)<-[:ORIGIN]-(f:Flight)
WITH a, count(f) as flights
RETURN a, flights
ORDER BY flights ASC
5)MATCH path = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport)
WHERE REDUCE(acc = 0, n IN [n IN NODES(path) WHERE 'Flight' IN LABELS(n)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) < 3000
RETURN path
6)MATCH path = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH path, REDUCE(acc = 0, n IN [n IN NODES(path) WHERE 'Flight' IN LABELS(n)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price
RETURN path, price
ORDER BY price desc
7)MATCH path = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH path, REDUCE(acc = 0, n IN [n IN NODES(path) WHERE 'Flight' IN LABELS(n)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price
RETURN path, price
ORDER BY price asc LIMIT 1
8)MATCH path = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH path, REDUCE(acc = 0, n IN [n IN NODES(path) WHERE 'Flight' IN LABELS(n)] |
  acc + [(n)<-[:ASSIGN]-(ticket {class: 'business'}) | ticket.price][0]
  ) as price
RETURN path, price
ORDER BY price asc LIMIT 1